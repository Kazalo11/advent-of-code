for i in range(len(grid)):
#     for j in range(len(grid[0])):
#         test = grid[i][j]
#         if test == 'S':
#             value = ord('a')
#         elif test == 'E':
#             value = ord('z')
#         else:
#             value = ord(test)
#             if test in graph.nodes:
#                 test = test + str(count)
#                 count += 1
#             graph.add_nodes(test)
#         if i != 0:
#             check = grid[i - 1][j]
#             if check == 'S':
#                 check_value = ord('a')
#             elif check == 'E':
#                 check_value = ord('z')
#             else:
#                 check_value = ord(check)
#             if abs(check_value - value) <= 1:
#                 graph.add_edge(test, check, 1)
#             else:
#                 graph.add_edge(test, check, float('inf'))
#         if i != len(grid) - 1:
#             check = grid[i + 1][j]
#             if check == 'S':
#                 check_value = ord('a')
#             elif check == 'E':
#                 check_value = ord('z')
#             else:
#                 check_value = ord(check)
#             if abs(check_value - value) <= 1:
#                 graph.add_edge(test, check, 1)
#             else:
#                 graph.add_edge(test, check, float('inf'))
#         if j != 0:
#             check = grid[i][j - 1]
#             if check == 'S':
#                 check_value = ord('a')
#             elif check == 'E':
#                 check_value = ord('z')
#             else:
#                 check_value = ord(check)
#             if abs(check_value - value) <= 1:
#                 graph.add_edge(test, check, 1)
#             else:
#                 graph.add_edge(test, check, float('inf'))
#
#         if j != len(grid[0]) - 1:
#             check = grid[i][j + 1]
#             if check == 'S':
#                 check_value = ord('a')
#             elif check == 'E':
#                 check_value = ord('z')
#             else:
#                 check_value = ord(check)
#             if abs(check_value - value) <= 1:
#                 graph.add_edge(test, check, 1)
#             else:
#                 graph.add_edge(test, check, float('inf'))